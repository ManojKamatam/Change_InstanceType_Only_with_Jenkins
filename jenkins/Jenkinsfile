pipeline {
    agent any

    environment {
        APPLICATION_NAME = 'test-env'  // Replace with your actual application name
        ENVIRONMENT_NAME = 'Test-env-env'  // Replace with your actual environment name
        AWS_REGION = 'us-east-1'  // Replace with your AWS region
        SECRET_NAME = 'secret-jenkins-access'  // Replace with your actual secret name
        NEW_INSTANCE_TYPE = 't3.small'  // Replace with the desired instance type
    }

    stages {
        stage('Retrieve AWS Credentials from Secrets Manager') {
            steps {
                script {
                    // Retrieve the secret as plain text (JSON object)
                    def secretValue = sh(script: "aws secretsmanager get-secret-value --secret-id ${SECRET_NAME} --query 'SecretString' --output text --region ${AWS_REGION}", returnStdout: true).trim()
                    
                    // Parse the JSON to get the key-value pair
                    def jsonSlurper = new groovy.json.JsonSlurper()
                    def credentials = jsonSlurper.parseText(secretValue)

                    // Extract the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
                    env.AWS_ACCESS_KEY_ID = credentials.keySet().iterator().next()  // The key (AWS_ACCESS_KEY_ID)
                    env.AWS_SECRET_ACCESS_KEY = credentials[env.AWS_ACCESS_KEY_ID]  // The value (AWS_SECRET_ACCESS_KEY)
                }
            }
        }

        stage('Change Instance Type') {
            steps {
                script {
                    // Change the instance type of the Beanstalk environment
                    sh """
                        aws elasticbeanstalk update-environment \
                          --application-name ${APPLICATION_NAME} \
                          --environment-name ${ENVIRONMENT_NAME} \
                          --option-settings Namespace=aws:autoscaling:launchconfiguration,OptionName=InstanceType,Value=${NEW_INSTANCE_TYPE} \
                          --region ${AWS_REGION}
                    """
                }
            }
        }
    }

    stage('Wait for Environment Readiness') {
            steps {
                script {
                    def isReady = false
                    while (!isReady) {
                        def result = sh(script: """
                            aws elasticbeanstalk describe-environments --application-name ${APPLICATION_NAME} \
                            --environment-names ${ENVIRONMENT_NAME} --query 'Environments[0].Status' --output text --region ${AWS_REGION}
                        """, returnStdout: true).trim()
                        if (result == 'Ready') {
                            isReady = true
                        } else {
                            echo "Waiting for environment to be ready..."
                            sleep(time: 60, unit: 'SECONDS') // Wait 60 seconds before checking again
                        }
                    }
                }
            }
        }

    post {
        success {
            echo 'Instance type updated successfully.'
        }
        failure {
            echo 'Failed to update the instance type. Please check the logs for more details.'
        }
    }
}
